version: 2.1
orbs:
  aws-ecr: circleci/aws-ecr@6.8.1
  aws-ecs: circleci/aws-ecs@1.1.0
jobs:
  test:
    docker:
      - image: circleci/ruby:2.5.3-node-browsers
        environment:
          RAILS_ENV: test
          DB_HOST: 127.0.0.1
          DB_USERNAME: 'root'
          DB_PASSWORD: ''
      - image: circleci/mysql:5.7

    working_directory: ~/ShareTask

    steps:
      - checkout
      - restore_cache:
          keys:
          - v2-dependencies-{{ checksum "Gemfile.lock" }}
          - v2-dependencies-

      - run:
          name: install dependencies
          command: |
            bundle install --jobs=4 --retry=3 --path vendor/bundle

      - save_cache:
          paths:
            - ./vendor/bundle
          key: v2-dependencies-{{ checksum "Gemfile.lock" }}

      - run:
          name: Wait for DB
          command: dockerize -wait tcp://127.0.0.1:3306 -timeout 120s

      - run: bundle exec rake db:create
      - run: bundle exec rake db:schema:load

      - run:
          name: run tests
          command: |
            mkdir /tmp/test-results
            TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)"

            bundle exec rspec --format progress \
                            --format RspecJunitFormatter \
                            --out /tmp/test-results/rspec.xml \
                            --format progress \
                            $TEST_FILES

      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results

      - run:
          name: run rubocop
          command: bundle exec rubocop

workflows:
  build-and-deploy:
    jobs:
      - test:
          filters:
            branches:
              only:
                - master
      - aws-ecr/build-and-push-image:
          name: 'build-rails-app'
          requires:
            - test
          filters:
            branches:
              only:
                - master
          account-url: AWS_ECR_ACCOUNT_URL
          region: AWS_REGION
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          repo: "${MY_APP_PREFIX_RAILS}"
          tag: "${CIRCLE_SHA1}"
      - aws-ecr/build-and-push-image:
          name: 'build-nginx'
          requires:
            - test
          filters:
            branches:
              only:
                - master
          account-url: AWS_ECR_ACCOUNT_URL
          region: AWS_REGION
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          dockerfile: './containers/nginx/Dockerfile'
          repo: "${MY_APP_PREFIX_NGINX}"
          tag: "${CIRCLE_SHA1}"
